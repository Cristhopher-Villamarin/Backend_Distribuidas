services:
  # CockroachDB cluster de 2 nodos
  cockroachdb-node1:
    image: cockroachdb/cockroach:v23.1.11
    command: start --insecure --join=cockroachdb-node1,cockroachdb-node2
    hostname: cockroachdb-node1
    ports:
      - "26257:26257"
      - "8081:8080"
    volumes:
      - cockroach-data1:/cockroach/cockroach-data
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "cockroach", "sql", "--insecure", "-e", "SELECT 1"]
      interval: 10s
      timeout: 5s
      retries: 5

  cockroachdb-node2:
    image: cockroachdb/cockroach:v23.1.11
    command: start --insecure --join=cockroachdb-node1,cockroachdb-node2
    hostname: cockroachdb-node2
    ports:
      - "26258:26257" # Puerto SQL diferente para evitar conflictos
      - "8082:8080"   # Puerto UI diferente
    volumes:
      - cockroach-data2:/cockroach/cockroach-data
    networks:
      - app-network
    depends_on:
      - cockroachdb-node1

  # RabbitMQ
  rabbitmq:
    image: rabbitmq:3-management
    ports:
      - "5672:5672"
      - "15672:15672"
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "rabbitmqctl", "status"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Kong API Gateway
  kong:
    image: kong:latest
    environment:
      KONG_DATABASE: "off"
      KONG_DECLARATIVE_CONFIG: /kong/declarative/kong.yml
      KONG_PROXY_ACCESS_LOG: /dev/stdout
      KONG_ADMIN_ACCESS_LOG: /dev/stdout
      KONG_PROXY_ERROR_LOG: /dev/stderr
      KONG_ADMIN_ERROR_LOG: /dev/stderr
      KONG_ADMIN_LISTEN: "0.0.0.0:8001"
    ports:
      - "8000:8000"
      - "8001:8001"
    volumes:
      - ./kong.yml:/kong/declarative/kong.yml
    networks:
      - app-network
    depends_on:
      usuarios:
        condition: service_started
      categorias:
        condition: service_started
      eventos:
        condition: service_started
      localidades:
        condition: service_started
      compras:
        condition: service_started
      entradas:
        condition: service_started
    restart: unless-stopped

  # Microservicio de usuarios
  usuarios:
    build: ./usuarios
    ports:
      - "3000:3000"
    environment:
      DB_HOST: cockroachdb-node1
      DB_PORT: 26257
      DB_NAME: usuariosdb
      DB_USER: root
      DB_PASSWORD: ""
      RABBITMQ_HOST: rabbitmq
      RABBITMQ_PORT: 5672
      RABBITMQ_USER: guest
      RABBITMQ_PASSWORD: guest
      JWT_SECRET: supersecreto123
      PORT: 3000
      NODE_ENV: development
    depends_on:
      cockroachdb-node1:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Microservicio de categorias
  categorias:
    build: ./categorias
    ports:
      - "3001:3001"
    environment:
      DB_HOST: cockroachdb-node1
      DB_PORT: 26257
      DB_NAME: categoriasdb
      DB_USER: root
      DB_PASSWORD: ""
      RABBITMQ_HOST: rabbitmq
      RABBITMQ_PORT: 5672
      RABBITMQ_USER: guest
      RABBITMQ_PASSWORD: guest
      JWT_SECRET: supersecreto123
      PORT: 3001
      NODE_ENV: development
    depends_on:
      cockroachdb-node1:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Microservicio de eventos
  eventos:
    build: ./eventos
    ports:
      - "3002:3002"
    environment:
      DB_HOST: cockroachdb-node1
      DB_PORT: 26257
      DB_NAME: eventosdb
      DB_USER: root
      DB_PASSWORD: ""
      RABBITMQ_HOST: rabbitmq
      RABBITMQ_PORT: 5672
      RABBITMQ_USER: guest
      RABBITMQ_PASSWORD: guest
      JWT_SECRET: supersecreto123
      PORT: 3002
      NODE_ENV: development
    depends_on:
      cockroachdb-node1:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3002"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Microservicio de localidades
  localidades:
    build: ./localidades
    ports:
      - "3003:3003"
    environment:
      DB_HOST: cockroachdb-node1
      DB_PORT: 26257
      DB_NAME: localidadesdb
      DB_USER: root
      DB_PASSWORD: ""
      RABBITMQ_HOST: rabbitmq
      RABBITMQ_PORT: 5672
      RABBITMQ_USER: guest
      RABBITMQ_PASSWORD: guest
      JWT_SECRET: supersecreto123
      PORT: 3003
      NODE_ENV: development
    depends_on:
      cockroachdb-node1:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3003"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Microservicio de compras
  compras:
    build: ./compras
    ports:
      - "3004:3004"
    environment:
      DB_HOST: cockroachdb-node1
      DB_PORT: 26257
      DB_NAME: comprasdb
      DB_USER: root
      DB_PASSWORD: ""
      RABBITMQ_HOST: rabbitmq
      RABBITMQ_PORT: 5672
      RABBITMQ_USER: guest
      RABBITMQ_PASSWORD: guest
      JWT_SECRET: supersecreto123
      PORT: 3004
      NODE_ENV: development
    depends_on:
      cockroachdb-node1:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3004"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Microservicio de entradas
  entradas:
    build: ./entradas
    ports:
      - "3005:3005"
    environment:
      DB_HOST: cockroachdb-node1
      DB_PORT: 26257
      DB_NAME: entradasdb
      DB_USER: root
      DB_PASSWORD: ""
      RABBITMQ_HOST: rabbitmq
      RABBITMQ_PORT: 5672
      RABBITMQ_USER: guest
      RABBITMQ_PASSWORD: guest
      JWT_SECRET: supersecreto123
      PORT: 3005
      NODE_ENV: development
    depends_on:
      cockroachdb-node1:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3005"]
      interval: 10s
      timeout: 5s
      retries: 5

volumes:
  cockroach-data1:
  cockroach-data2:

networks:
  app-network:
    driver: bridge